var documenterSearchIndex = {"docs":
[{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/#Edge","page":"Interface","title":"Edge","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"AbstractEdge\nsrc\ndst\nweight\nBase.reverse","category":"page"},{"location":"interface/#GraphsBase.AbstractEdge","page":"Interface","title":"GraphsBase.AbstractEdge","text":"AbstractEdge{V,W}\n\nAbstract type for graph edges with vertices of type V and a weight of type W.\n\nA subtype E satisfies this interface if both V and E can be hashed and compared, and if the following methods are implemented:\n\nsrc(e::E)\ndst(e::E)\nweight(e::E)\nBase.reverse(e::E)\n\n\n\n\n\n","category":"type"},{"location":"interface/#GraphsBase.src","page":"Interface","title":"GraphsBase.src","text":"src(e)\n\nReturn the source vertex of edge e.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.dst","page":"Interface","title":"GraphsBase.dst","text":"dst(e)\n\nReturn the destination vertex of edge e.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.weight","page":"Interface","title":"GraphsBase.weight","text":"weight(e)\n\nReturn the weight of edge e.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Base.reverse","page":"Interface","title":"Base.reverse","text":"reverse(e)\n\nReturn a new edge with the same data as edge e but inverted source and destination.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Graph-(required)","page":"Interface","title":"Graph (required)","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"AbstractGraph\nis_directed\nvertices\nout_edges\nin_edges","category":"page"},{"location":"interface/#GraphsBase.AbstractGraph","page":"Interface","title":"GraphsBase.AbstractGraph","text":"AbstractGraph{V,E}\n\nAn abstract type representing a graph with vertices of type V and edges of type E.\n\nA subtype G <: AbstractGraph satisfies this interface if E satisfies the AbstractEdge interface, and if the following methods are implemented:\n\nis_directed(::Type{G})\nvertices(g::G)\nout_edges(g::G, v)\nin_edges(g::G, v)\n\n\n\n\n\n","category":"type"},{"location":"interface/#GraphsBase.is_directed","page":"Interface","title":"GraphsBase.is_directed","text":"is_directed(g)\nis_directed(G)\n\nReturn true if the graph g / graph type G is a directed graph.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.vertices","page":"Interface","title":"GraphsBase.vertices","text":"vertices(g)\n\nReturn an iterable containing the vertices of g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.out_edges","page":"Interface","title":"GraphsBase.out_edges","text":"out_edges(g, u)\n\nReturn an iterable containing the edges of a graph g going out of vertex u.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.in_edges","page":"Interface","title":"GraphsBase.in_edges","text":"in_edges(g, v)\n\nReturn an iterable containing the edges of a graph g going into vertex v.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Graph-(optional)","page":"Interface","title":"Graph (optional)","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"nv\nne\nhas_vertex\nhas_edge\nhas_self_loops\nedges\nout_neighbors\nin_neighbors\ncreate_vertex_container\ncreate_edge_container","category":"page"},{"location":"interface/#GraphsBase.nv","page":"Interface","title":"GraphsBase.nv","text":"nv(g)\n\nCount the number of vertices in g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.ne","page":"Interface","title":"GraphsBase.ne","text":"ne(g)\n\nCount the number of edges in g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.has_vertex","page":"Interface","title":"GraphsBase.has_vertex","text":"has_vertex(g, v)\n\nReturn true if the graph g contains the vertex v.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.has_edge","page":"Interface","title":"GraphsBase.has_edge","text":"has_edge(g, e)\n\nReturn true if the graph g contains the edge e (not just an edge with the same source and destination).\n\n\n\n\n\nhas_edge(g, u, v)\n\nReturn true if the graph g contains an edge from vertex u to vertex v.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.has_self_loops","page":"Interface","title":"GraphsBase.has_self_loops","text":"has_self_loops(g)\n\nReturn true if g has any edge from a vertex to itself.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.edges","page":"Interface","title":"GraphsBase.edges","text":"edges(g)\n\nReturn an iterable containing the edges of g.\n\n\n\n\n\nedges(g, u, v)\n\nReturn an iterable containing the edges of a graph g going our of u and into v.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.out_neighbors","page":"Interface","title":"GraphsBase.out_neighbors","text":"out_neighbors(g, u)\n\nReturn an iterable containing all neighbors connected to vertex u by an outgoing edge.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.in_neighbors","page":"Interface","title":"GraphsBase.in_neighbors","text":"in_neighbors(g, v)\n\nReturn an iterable containing all neighbors connected to vertex v by an incoming edge.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.create_vertex_container","page":"Interface","title":"GraphsBase.create_vertex_container","text":"create_vertex_container(g, ::Type{K})\n\nReturn a new container with element type K that can be indexed by the vertices of 'g'.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.create_edge_container","page":"Interface","title":"GraphsBase.create_edge_container","text":"create_edge_container(g, ::Type{K})\n\nReturn a new container with element type K that can be indexed by the edges of 'g'.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Graph-(modification)","page":"Interface","title":"Graph (modification)","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"add_vertex!\nrm_vertex!\nadd_edge!\nrm_edge!","category":"page"},{"location":"interface/#GraphsBase.add_vertex!","page":"Interface","title":"GraphsBase.add_vertex!","text":"add_vertex!(g, v)\n\nAdd the vertex v to the graph g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.rm_vertex!","page":"Interface","title":"GraphsBase.rm_vertex!","text":"rm_vertex!(g, v)\n\nRemove the vertex v from the graph g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.add_edge!","page":"Interface","title":"GraphsBase.add_edge!","text":"add_edge!(g, e)\n\nAdd the edge e to the graph g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.rm_edge!","page":"Interface","title":"GraphsBase.rm_edge!","text":"rm_edge!(g, e)\n\nRemove the edge e from the graph g.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Element-types","page":"Interface","title":"Element types","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"Base.eltype\nedgetype\nweighttype","category":"page"},{"location":"interface/#Base.eltype","page":"Interface","title":"Base.eltype","text":"eltype(e)\neltype(E)\n\nReturn the type of the vertices of an edge e / an edge type E.\n\n\n\n\n\neltype(g)\neltype(G)\n\nReturn the type of the vertices of a graph g / a graph type G.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.edgetype","page":"Interface","title":"GraphsBase.edgetype","text":"edgetype(g)\nedgetype(G)\n\nReturn the type of the edges of a graph g / a graph type G.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.weighttype","page":"Interface","title":"GraphsBase.weighttype","text":"weighttype(e)\nweighttype(E)\n\nReturn the type of the weights of an edge e / an edge type E.\n\n\n\n\n\nweighttype(g)\nweighttype(G)\n\nReturn the type of the edge weights of a graph g / a graph type G.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Checks","page":"Interface","title":"Checks","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"GraphsBase.check_comparable_interface\nGraphsBase.check_edge_interface\nGraphsBase.check_graph_interface","category":"page"},{"location":"interface/#GraphsBase.check_comparable_interface","page":"Interface","title":"GraphsBase.check_comparable_interface","text":"check_comparable_interface(T)\n\nCheck that objects of type T can be hashed and compared.\n\nThis is true if the following methods are implemented:\n\nBase.hash(t::T, h::UInt)\nBase.isless(t1::T, t2::T)\nBase.:(==)(t1::T, t2::T)\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.check_edge_interface","page":"Interface","title":"GraphsBase.check_edge_interface","text":"check_edge_interface(E)\n\nCheck that objects of type E can be used as edges of a graph.\n\n\n\n\n\n","category":"function"},{"location":"interface/#GraphsBase.check_graph_interface","page":"Interface","title":"GraphsBase.check_graph_interface","text":"check_graph_interface(G)\n\nCheck that objects of type G can be used as graphs.\n\n\n\n\n\n","category":"function"},{"location":"implementations/#Concrete-implementations","page":"Implementations","title":"Concrete implementations","text":"","category":"section"},{"location":"implementations/#SimpleGraphs","page":"Implementations","title":"SimpleGraphs","text":"","category":"section"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"Modules = [GraphsBase.SimpleGraphs]","category":"page"},{"location":"implementations/#GraphsBase.SimpleGraphs.SimpleDiGraph","page":"Implementations","title":"GraphsBase.SimpleGraphs.SimpleDiGraph","text":"mutable struct SimpleDiGraph{T<:Integer} <: AbstractGraph{T<:Integer, GraphsBase.SimpleGraphs.SimpleEdge{T<:Integer}}\n\nA type representing a directed graph with unweighted, non-multiple edges.\n\nFields\n\nne::Int64: Number of edges\nfadjlist::Array{Vector{T}, 1} where T<:Integer: Forward adjacency list such that F[v] contains the out-neighbors of vertex v\nbadjlist::Array{Vector{T}, 1} where T<:Integer: Backward adjacency list such that B[u] contains the in-neighbors of vertex v\n\n\n\n\n\n","category":"type"},{"location":"implementations/#GraphsBase.SimpleGraphs.SimpleEdge","page":"Implementations","title":"GraphsBase.SimpleGraphs.SimpleEdge","text":"struct SimpleEdge{T<:Integer} <: AbstractEdge{T<:Integer, Int64}\n\nA type representing an unweighted directed edge.\n\nFields\n\nsrc::Integer: Source of the edge\ndst::Integer: Destination of the edge\n\n\n\n\n\n","category":"type"},{"location":"implementations/#GraphsBase.SimpleGraphs.SimpleGraph","page":"Implementations","title":"GraphsBase.SimpleGraphs.SimpleGraph","text":"mutable struct SimpleGraph{T<:Integer} <: AbstractGraph{T<:Integer, GraphsBase.SimpleGraphs.SimpleEdge{T<:Integer}}\n\nA type representing an undirected graph with unweighted, non-multiple edges.\n\nFields\n\nne::Int64: Number of edges\nadjlist::Array{Vector{T}, 1} where T<:Integer: Adjacency list such that L[v] contains the neighbors of vertex v\n\n\n\n\n\n","category":"type"},{"location":"implementations/#SimpleWeightedGraphs","page":"Implementations","title":"SimpleWeightedGraphs","text":"","category":"section"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"Modules = [GraphsBase.SimpleWeightedGraphs]","category":"page"},{"location":"implementations/#GraphsBase.SimpleWeightedGraphs.SimpleWeightedDiGraph","page":"Implementations","title":"GraphsBase.SimpleWeightedGraphs.SimpleWeightedDiGraph","text":"struct SimpleWeightedDiGraph{T<:Integer, W} <: AbstractGraph{T<:Integer, GraphsBase.SimpleWeightedGraphs.SimpleWeightedEdge{T<:Integer, W}}\n\nA type representing a directed graph with weighted, non-multiple edges.\n\nFields\n\nweights::SparseArrays.SparseMatrixCSC{W, T} where {T<:Integer, W}: Transposed weighted adjacency matrix: weights[v, u] contains the weight of edge (u, v)\n\n\n\n\n\n","category":"type"},{"location":"implementations/#GraphsBase.SimpleWeightedGraphs.SimpleWeightedEdge","page":"Implementations","title":"GraphsBase.SimpleWeightedGraphs.SimpleWeightedEdge","text":"struct SimpleWeightedEdge{T<:Integer, W} <: AbstractEdge{T<:Integer, W}\n\nA type representing a weighted directed edge.\n\nFields\n\nsrc::Integer: Source of the edge\ndst::Integer: Destination of the edge\nweight::Any: Weight of the edge\n\n\n\n\n\n","category":"type"},{"location":"implementations/#GraphsBase.SimpleWeightedGraphs.SimpleWeightedGraph","page":"Implementations","title":"GraphsBase.SimpleWeightedGraphs.SimpleWeightedGraph","text":"struct SimpleWeightedGraph{T<:Integer, W} <: AbstractGraph{T<:Integer, GraphsBase.SimpleWeightedGraphs.SimpleWeightedEdge{T<:Integer, W}}\n\nA type representing an undirected graph with weighted, non-multiple edges.\n\nFields\n\nweights::SparseArrays.SparseMatrixCSC{W, T} where {T<:Integer, W}: Symmetric weighted adjacency matrix: weights[u, v] and weights[v, u] both contain the weight of edge {u, v}\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GraphsBase","category":"page"},{"location":"#GraphsBase","page":"Home","title":"GraphsBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GraphsBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GraphsBase","category":"page"},{"location":"#GraphsBase.GraphsBase","page":"Home","title":"GraphsBase.GraphsBase","text":"GraphsBase\n\nThe basic interface and graph types for the JuliaGraphs ecosystem.\n\n\n\n\n\n","category":"module"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
